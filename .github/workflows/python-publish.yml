# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Setup Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: false
        installer-parallel: true

    - name: Install Dependencies
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.create true
        poetry config virtualenvs.path .venv
        poetry install --no-interaction --no-root

    - name: Build package
      run: |
        source .venv/bin/activate
        invoke build

    - name: Publish Python Poetry package
      uses: JRubics/poetry-publish@v1.13
      with:
        python_version: "3.10.8"
        poetry_version: "==1.1.15" # (PIP version specifier syntax)
        pypi_token: ${{ secrets.PYPI_TOKEN }}
        build_format: "sdist"
        allow_poetry_pre_release: "yes"
        ignore_dev_requirements: "yes"
